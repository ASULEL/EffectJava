hashCode是什么？
此方法返回对象的hash值

hash用来做什么？
hash也被翻译为散列,把对象的不定信息转换为定长的消息摘要。
hash值是本身已有信息的简略、合并
hash值不是对象本身的固有属性，而是对象某些信息的整合，并且对这个整合的算法没有固定的模式，可以自定义
不同的算法会得到不同的hash值，但对于同一个对象，同一个算法，如果属性没有变，那么hash值也不会发生改变

java中hashCode的约定
hashCode只是消息摘要，是内容的映射，不能准确反映实际的数据，在散列中也可能发生冲突现象。
单纯hashCode是没有意义的，它必须结合equals方法使用，作为equals的前置操作
重点：他不能用来判断相等，而是用来判断不相等（即散列表中key不相等的肯定不是相同对象，但是key就算相等了，也不一定是相同的对象）

也就是说hashCode是用来服务equals方法的，这个方法设计的核心原则
1.如果equals为true,则hashCode必须相等
2.如果equals为false,hashCode可以相等，但如果不相等更好,这样有助于提高hash table的性能

所以 如果覆盖了equals，则必须覆盖hashCode满足以上要求
针对原则1（如果equals为true，则hashCode必须相等），可以得出如下：
如果equals使用的信息未变化，则hashCode也不应该变化(前面说了equals方法禁止引入随机或自变因素)

建议：
1.hashCode计算时，把非关键属性和派生或冗余属性排除(如果属性c和属性a和b强相关(例如c是由a和b计算出来的)，则只使用a、b或c)
2.不要为了提高性能，把关键因素排除，这样可能导致hash table的性能损耗（不要因为关键属性计算hashCode比较慢，而把关键因素排除）
  原因：hashCode是用来快速在hash table中定位或者快速处理equals不等问题，排除了关键属性，可能导致hash的冲突，在后续做equals比较时，这部分性可能会加倍的损失
3.对于不可变对象，可能参考String等来做hashCode的缓存